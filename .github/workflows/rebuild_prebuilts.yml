name: rebuild-prebuilts

on:
#  schedule:
#    - cron: '0 10 * * *' # everyday at 10am
  push:
    branches:
      - '**'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
      -
        name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: all
      -
        name: Set Permissions
        id: set-permissions
        run: find . -type f -iname "*.sh" -exec chmod +x {} \;
        working-directory: dockerbuildsystem
      -
        name: Run build
        id: build-docker
        run: |
          bash ./build-docker.sh
          # check for output files
          DEPLOYFILECOUNT=$(ls -1 . | wc -l)
          if [ "$DEPLOYFILECOUNT" -ge 2 ]
          then
          echo "Done! Your image(s) should be in deploy/"
          exit 0
          else
          echo "The script failed" >&2
          exit 1
          fi
        working-directory: dockerbuildsystem
      - 
        name: Upload build artifacts 
        id: upload_deploy
        uses: actions/upload-artifact@v2
        with:
          name: deploy
          path: |
            ./pi-gen/deploy/*.info
            ./pi-gen/deploy/*.zip
            ./pi-gen/deploy/build.log
        working-directory: dockerbuildsystem
  release:
    runs-on: ubuntu-latest
    steps:
      - 
        name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.version }}
          release_name: Release ${{ github.event.inputs.version }}
          draft: true
          prerelease: true
      - 
        name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: deploy
      - 
        name: Get Release File Name & Upload URL
        id: get_release_info
        run: |
          ARTIFACT_PATHNAME=$(ls deploy/*.zip | head -n 1)
          ARTIFACT_NAME=$(basename $ARTIFACT_PATHNAME)
          echo ::set-output name=artifact_filename::${ARTIFACT_NAME}
          echo ::set-output name=artifact_path::${ARTIFACT_PATHNAME}
      - 
        name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ${{ steps.get-artifact-name.outputs.artifact_path }}
          asset_name: ${{ steps.get-artifact-name.outputs.artifact_filename }}
          asset_content_type: application/zip
